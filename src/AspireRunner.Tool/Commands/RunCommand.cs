using AspireRunner.Tool.Logging;
using System.ComponentModel;

namespace AspireRunner.Tool.Commands;

public class RunCommand : AsyncCommand<RunCommand.Settings>
{
    public class Settings : CommandSettings
    {
        [CommandArgument(0, "[version]")]
        [Description("The version of the dashboard to run")]
        public string? Version { get; set; }

        [CommandOption("-b|--browser")]
        [Description("Launch the dashboard in the default browser")]
        public bool LaunchBrowser { get; set; }

        [DefaultValue(18888)]
        [CommandOption("-p|--port")]
        [Description("The port the dashboard will be available on")]
        public int DashboardPort { get; init; }

        [CommandOption("-a|--auth")]
        [Description("Use browser token authentication for the dashboard")]
        public bool UseAuth { get; init; }

        [CommandOption("-t|--token")]
        [Description("The token to use for dashboard authentication, if not passed, the token will be randomly generated by the dashboard")]
        public string? AuthToken { get; set; }

        [CommandOption("-s|--https")]
        [Description("Use HTTPS instead of HTTP, this applies to both the dashboard and the OTLP server, Enabled by default")]
        public bool? UseHttps { get; init; }

        [CommandOption("--dashboard-https")]
        [Description("Use HTTPS instead of HTTP for the dashboard, overrides the global HTTPS option")]
        public bool? DashboardHttps { get; init; }

        [DefaultValue(4317)]
        [CommandOption("--otlp-port")]
        [Description("The port the OTLP/gRPC server will listen on, can be disabled by passing 0")]
        public int OtlpPort { get; init; }

        [CommandOption("--otlp-http-port")]
        [Description("The port the OTLP/HTTP server will listen on, by default, only the gRPC server is started")]
        public int? OtlpHttpPort { get; set; }

        [CommandOption("--otlp-key")]
        [Description("The API key to use for the OTLP server")]
        public string? OtlpKey { get; set; }

        [CommandOption("--otlp-https")]
        [Description("Use HTTPS instead of HTTP for the OTLP/gRPC and OTLP/HTTP endpoints, overrides the global HTTPS option")]
        public bool? OtlpHttps { get; set; }

        [CommandOption("--cors-origins")]
        [Description("The allowed origins for CORS requests, separated by a comma. A wildcard (*) can be used to allow any domain")]
        public string? CorsAllowedOrigins { get; set; }

        [CommandOption("--cors-headers")]
        [Description("The allowed headers for CORS requests, separated by a comma")]
        public string? CorsAllowedHeaders { get; set; }

        [CommandOption("--hostname")]
        [Description("The hostname used for the dashboard and OTLP server, 'localhost' by default")]
        public string? Hostname { get; set; }

        [CommandOption("-m|--multiple")]
        [Description("Allow running multiple instances of the dashboard, if not passed, existing instances will be replaced")]
        public bool AllowMultipleInstances { get; set; }

        [CommandOption("--auto-update")]
        [Description("Automatically update the dashboard to the latest version, Enabled by default")]
        public bool? AutoUpdate { get; set; }

        [CommandOption("-v|--verbose")]
        [Description("Enable verbose logging")]
        public bool Verbose { get; set; }
    }

    public override async Task<int> ExecuteAsync(CommandContext context, Settings settings)
    {
        // nothing works rn
        var logger = new InMemoryLogger<Program>();

        var dashboardOptions = BuildOptions(arguments);

        var aspireDashboardManager = new DashboardFactory(dotnet, nugetHelper, new ConsoleLogger<AspireDashboardManager>(arguments.Verbose));
        var aspireDashboard = await GetDashboardAsync(aspireDashboardManager, dashboardOptions, arguments);

        aspireDashboard.DashboardStarted += url => logger.LogInformation(Green("The Aspire Dashboard is ready at {Url}"), url);
        aspireDashboard.OtlpEndpointReady += endpoint => logger.LogInformation(Green("The OTLP/{Protocol} endpoint is ready at {Url}"), endpoint.Protocol, endpoint.Url);

        var stopHandler = (PosixSignalContext _) => aspireDashboard.Stop();
        using var sigInt = PosixSignalRegistration.Create(PosixSignal.SIGINT, stopHandler);
        using var sigTerm = PosixSignalRegistration.Create(PosixSignal.SIGTERM, stopHandler);

        try
        {
            await aspireDashboard.StartAsync();
            await aspireDashboard.WaitForExitAsync();

            logger.LogDebug("Aspire Dashboard exited, Errors = {HasErrors}", aspireDashboard.HasErrors);
            return aspireDashboard.HasErrors ? ReturnCodes.AspireDashboardError : ReturnCodes.Success;
        }
        catch (Exception e)
        {
            throw new ConsoleRunnerException
            {
                FormattedMessage = $"An error occurred while starting the Aspire Dashboard: {e.Message}",
                ReturnCode = ReturnCodes.AspireDashboardError
            };
        }
        throw new NotImplementedException();
    }
}