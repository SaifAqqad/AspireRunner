using AspireRunner.Installer;
using Microsoft.Extensions.Logging;
using Spectre.Console.Rendering;
using System.ComponentModel;
using System.Runtime.InteropServices;

namespace AspireRunner.Tool.Commands;

public class RunCommand : AsyncCommand<RunCommand.Settings>
{
    public class Settings : CommandSettings
    {
        [CommandArgument(0, "[version]")]
        [Description("The version of the dashboard to run")]
        public string? Version { get; set; }

        [CommandOption("-b|--browser")]
        [Description("Launch the dashboard in the default browser")]
        public bool LaunchBrowser { get; set; }

        [DefaultValue(18888)]
        [CommandOption("-p|--port")]
        [Description("The port the dashboard will be available on")]
        public int DashboardPort { get; init; }

        [CommandOption("-a|--auth")]
        [Description("Use browser token authentication for the dashboard")]
        public bool UseAuth { get; init; }

        [CommandOption("-t|--token")]
        [Description("The token to use for dashboard authentication, if not passed, the token will be randomly generated by the dashboard")]
        public string? AuthToken { get; set; }

        [CommandOption("-s|--https")]
        [Description("Use HTTPS instead of HTTP, this applies to both the dashboard and the OTLP server, Enabled by default")]
        public bool? UseHttps { get; init; }

        [CommandOption("--dashboard-https")]
        [Description("Use HTTPS instead of HTTP for the dashboard, overrides the global HTTPS option")]
        public bool? DashboardHttps { get; init; }

        [DefaultValue(4317)]
        [CommandOption("--otlp-port")]
        [Description("The port the OTLP/gRPC server will listen on, can be disabled by passing 0")]
        public int OtlpPort { get; init; }

        [CommandOption("--otlp-http-port")]
        [Description("The port the OTLP/HTTP server will listen on, by default, only the gRPC server is started")]
        public int? OtlpHttpPort { get; set; }

        [CommandOption("--otlp-key")]
        [Description("The API key to use for the OTLP server")]
        public string? OtlpKey { get; set; }

        [CommandOption("--otlp-https")]
        [Description("Use HTTPS instead of HTTP for the OTLP/gRPC and OTLP/HTTP endpoints, overrides the global HTTPS option")]
        public bool? OtlpHttps { get; set; }

        [CommandOption("--cors-origins")]
        [Description("The allowed origins for CORS requests, separated by a comma. A wildcard (*) can be used to allow any domain")]
        public string? CorsAllowedOrigins { get; set; }

        [CommandOption("--cors-headers")]
        [Description("The allowed headers for CORS requests, separated by a comma")]
        public string? CorsAllowedHeaders { get; set; }

        [CommandOption("--hostname")]
        [Description("The hostname used for the dashboard and OTLP server, 'localhost' by default")]
        public string? Hostname { get; set; }

        [CommandOption("-m|--multiple")]
        [Description("Allow running multiple instances of the dashboard, if not passed, existing instances will be replaced")]
        public bool AllowMultipleInstances { get; set; }

        [CommandOption("--auto-update")]
        [Description("Automatically update the dashboard to the latest version, Enabled by default")]
        public bool? AutoUpdate { get; set; }

        [CommandOption("--verbose")]
        [Description("Enable verbose logging")]
        public bool? Verbose { get; set; }
    }

    private Dashboard? _dashboard;
    private bool _dashboardStarted;
    private LogRecord[] _currentLog = [];
    private int _currentWidth = AnsiConsole.Profile.Width;
    private int _currentHeight = AnsiConsole.Profile.Height;

    public override async Task<int> ExecuteAsync(CommandContext context, Settings settings)
    {
        Logger.Verbose = settings.Verbose ?? false;
        Widgets.Write([Widgets.Header(), Widgets.RunnerVersion]);
        Widgets.WriteLines(2);

        // Prepare dashboard options
        var dashboardOptions = BuildOptions(settings);
        var otlpEndpoints = GetEnabledEndpoints(dashboardOptions);

        if (dashboardOptions.Runner.AutoUpdate)
        {
            var installer = new DashboardInstaller(Logger.DefaultFactory.CreateLogger<DashboardInstaller>());

            Widgets.Write("Checking for updates ");
            var result = await installer.EnsureLatestAsync().ShowSpinner();
            Widgets.Write(Widgets.SuccessCheck(), true);

            if (result.Installed != result.Latest)
            {
                Widgets.Write([$"Dashboard updated to version {result.Latest} ".Widget(), Widgets.SuccessCheck()], true);
            }
        }

        // Register runner signal handlers
        using var sigInt = PosixSignalRegistration.Create(PosixSignal.SIGINT, SignalHandler);
        using var sigTerm = PosixSignalRegistration.Create(PosixSignal.SIGTERM, SignalHandler);

        // Create and start the dashboard
        var dashboardFactory = new DashboardFactory(Logger.DefaultFactory.CreateLogger<DashboardFactory>(), Logger.DefaultFactory);
        _dashboard = await dashboardFactory.CreateDashboardAsync(dashboardOptions);
        if (_dashboard is null)
        {
            Widgets.Write("No dashboards found. Installing the latest version...", true);
            var installationResult = await new InstallCommand().ExecuteAsync(context, new() { Version = "latest" });
            if (installationResult is not 0)
            {
                return installationResult;
            }

            _dashboard = await dashboardFactory.CreateDashboardAsync(dashboardOptions);
            if (_dashboard is null)
            {
                Widgets.Write(Widgets.Error("Failed to create a dashboard instance after installation"));
                return -1;
            }
        }

        if (settings.Version is not null && !VersionRange.Parse(settings.Version, true).IsSatisfied(_dashboard.Version))
        {
            Widgets.Write(Widgets.Error($"No version matching '{settings.Version}' is installed, run '{RunnerInfo.CommandName} install {settings.Version}' to install it"));
            return 2;
        }

        Widgets.WriteInterpolated($"Found dashboard version [{Widgets.PrimaryColorText}]{_dashboard.Version}[/] at {_dashboard.InstallationPath}", true);

        await _dashboard.StartAsync(CancellationToken.None);
        _dashboardStarted = _dashboard.IsRunning;

        if (!_dashboardStarted)
        {
            return -1;
        }

        // Prepare the main layout
        var defaultStatus = Widgets.StatusSymbol(false);
        var table = new Table()
            .BorderStyle(new Style(Widgets.PrimaryColor, decoration: Decoration.Dim))
            .AddColumn("Dashboard", c => c.Centered().Width(40).NoWrap())
            .AddColumn("OTLP/gRPC", c => c.Centered().Width(40).NoWrap())
            .AddColumn("OTLP/HTTP", c => c.Centered().Width(40).NoWrap())
            .AddRow(defaultStatus, defaultStatus, defaultStatus);

        var actions = new Columns(
            Widgets.KeyActionDescriptor("S", "Stop"),
            Widgets.KeyActionDescriptor("R", "Restart"),
            Widgets.KeyActionDescriptor("B", "Open browser"),
            Widgets.KeyActionDescriptor("H", "Help"),
            Widgets.KeyActionDescriptor("Esc", "Exit")
        ).Collapse().PadRight(3);

        var headerRatio = 5;
        var header = Widgets.LargeHeader;
        if (Widgets.IsConsoleSmall())
        {
            headerRatio = 2;
            header = Widgets.SmallHeader;
        }

        var mainLayout = new Layout("main").SplitRows(
            new Layout("header", new Align(new Rows(header, Widgets.RunnerVersion).Collapse(), HorizontalAlignment.Left, VerticalAlignment.Top)).Ratio(headerRatio),
            new Layout("log", BuildLogPanel().Panel).Ratio(5),
            new Layout("table", new Align(table, HorizontalAlignment.Left, VerticalAlignment.Bottom)).Ratio(4),
            new Layout("prompt", new Align(actions, HorizontalAlignment.Left, VerticalAlignment.Bottom)).Ratio(1)
        );

        // Render the live layout (with spinners) while the dashboard is still initializing
        await RenderLiveInitializationAsync();

        // Re-render the static layout
        mainLayout.Render();

        while (true)
        {
            if (CheckDashboardStatusChanged()
                | CheckConsoleSizeChanged()
                | CheckLogEntries())
            {
                mainLayout.Render();
            }

            if (Console.KeyAvailable)
            {
                var pressedKey = Console.ReadKey(true);
                switch (pressedKey.Key)
                {
                    case ConsoleKey.R:
                    {
                        await StopDashboardAsync();

                        await _dashboard.StartAsync();

                        // Avoid launching the browser when restarting the dashboard
                        dashboardOptions.Runner.LaunchBrowser = false;
                        _dashboardStarted = _dashboard.IsRunning;

                        await RenderLiveInitializationAsync();
                        mainLayout.Render();
                        break;
                    }
                    case ConsoleKey.H or ConsoleKey.Help:
                    {
                        if (PlatformHelper.GetUrlOpener(RunnerInfo.ProjectUrl) is { } opener)
                        {
                            ProcessHelper.Run(opener.Executable, opener.Arguments);
                        }

                        break;
                    }
                    case ConsoleKey.B:
                    {
                        if (_dashboard is { IsRunning: true, Url: { } url } && PlatformHelper.GetUrlOpener(url) is { } opener)
                        {
                            ProcessHelper.Run(opener.Executable, opener.Arguments);
                        }

                        break;
                    }
                    case ConsoleKey.Escape:
                    {
                        await StopDashboardAsync();
                        AnsiConsole.Cursor.Show();
                        return 0;
                    }
                    case ConsoleKey.S:
                    {
                        await StopDashboardAsync();
                        break;
                    }
                }
            }

            await Task.Delay(5).ConfigureAwait(false);
        }

        async Task RenderLiveInitializationAsync()
        {
            mainLayout["prompt"].Update(new Text(""));
            AnsiConsole.Clear();

            await AnsiConsole.Live(mainLayout)
                .Overflow(VerticalOverflow.Crop)
                .Cropping(VerticalOverflowCropping.Bottom)
                .StartAsync(async ctx =>
                {
                    var spinner = !AnsiConsole.Console.Profile.Capabilities.Unicode ? Spinner.Known.Ascii : Spinner.Known.Dots;
                    var frameIndex = 0;

                    while (_dashboard.IsRunning)
                    {
                        var currentFrame = new Markup(spinner.Frames[frameIndex % spinner.Frames.Count], Widgets.PrimaryColor);
                        var currentPrompt = new Align(
                            new Columns(currentFrame, new Text("Waiting for dashboard startup")).Collapse(),
                            HorizontalAlignment.Left,
                            VerticalAlignment.Bottom
                        );

                        mainLayout["prompt"].Update(currentPrompt);
                        UpdateTableCells(currentFrame);
                        ctx.Refresh();

                        if (_dashboard.Url != null && _dashboard.OtlpEndpoints?.Count == otlpEndpoints.Count)
                        {
                            break;
                        }

                        frameIndex++;
                        await Task.Delay(spinner.Interval);
                    }
                });

            mainLayout["prompt"].Update(new Align(actions, HorizontalAlignment.Left, VerticalAlignment.Bottom));
            UpdateTableCells(defaultStatus);
        }

        async Task StopDashboardAsync()
        {
            await _dashboard.StopAsync();

            _currentLog = [];
            mainLayout["log"].Update(BuildLogPanel().Panel);

            _dashboardStarted = false;
            table.UpdateCell(0, 0, defaultStatus);
            table.UpdateCell(0, 1, defaultStatus);
            table.UpdateCell(0, 2, defaultStatus);
            mainLayout.Render();
        }

        void UpdateTableCells(Renderable defaultContent)
        {
            var maxWidth = int.Min((AnsiConsole.Profile.Width - 18) / 3, 35);

            table.UpdateCell(0, 0, _dashboard.Url is null ? defaultContent : Widgets.TableColumn([
                Widgets.StatusSymbol(true),
                Widgets.Link(_dashboard.Url, maxWidth: maxWidth)
            ], HorizontalAlignment.Center));

            if (otlpEndpoints.Contains("grpc"))
            {
                var grpcEndpoint = _dashboard.OtlpEndpoints?.FirstOrDefault(e => e.Protocol.Contains("grpc", StringComparison.OrdinalIgnoreCase));
                table.UpdateCell(0, 1, grpcEndpoint is null ? defaultContent : Widgets.TableColumn([
                    Widgets.StatusSymbol(true),
                    Widgets.Link(grpcEndpoint.Value.Url, maxWidth: maxWidth)
                ], HorizontalAlignment.Center));
            }

            if (otlpEndpoints.Contains("http"))
            {
                var httpEndpoint = _dashboard.OtlpEndpoints?.FirstOrDefault(e => e.Protocol.Contains("http", StringComparison.OrdinalIgnoreCase));
                table.UpdateCell(0, 2, httpEndpoint is null ? defaultContent : Widgets.TableColumn([
                    Widgets.StatusSymbol(true),
                    Widgets.Link(httpEndpoint.Value.Url, maxWidth: maxWidth)
                ], HorizontalAlignment.Center));
            }
        }

        bool CheckDashboardStatusChanged()
        {
            if (_dashboard.IsRunning == _dashboardStarted)
            {
                return false;
            }

            _dashboardStarted = false;
            table.UpdateCell(0, 0, defaultStatus);
            table.UpdateCell(0, 1, defaultStatus);
            table.UpdateCell(0, 2, defaultStatus);
            return true;
        }

        bool CheckConsoleSizeChanged()
        {
            if (AnsiConsole.Profile.Width == _currentWidth && AnsiConsole.Profile.Height == _currentHeight)
            {
                return false;
            }

            _currentWidth = AnsiConsole.Profile.Width;
            _currentHeight = AnsiConsole.Profile.Height;

            headerRatio = 5;
            header = Widgets.LargeHeader;
            if (Widgets.IsConsoleSmall())
            {
                headerRatio = 2;
                header = Widgets.SmallHeader;
            }

            mainLayout["header"].Update(new Align(new Rows(header, Widgets.RunnerVersion).Collapse(), HorizontalAlignment.Left, VerticalAlignment.Top)).Ratio(headerRatio);
            mainLayout["log"].Update(BuildLogPanel().Panel);
            UpdateTableCells(defaultStatus);

            return true;
        }

        bool CheckLogEntries()
        {
            var (newPanel, logUpdated) = BuildLogPanel();
            if (logUpdated)
            {
                mainLayout["log"].Update(newPanel);
            }

            return logUpdated;
        }

        void SignalHandler(PosixSignalContext _)
        {
            AnsiConsole.Cursor.Show();
            _dashboard?.StopAsync().Wait();
        }
    }

    private (IRenderable Panel, bool LogUpdated) BuildLogPanel()
    {
        const int lineCount = 10;
        var newLogs = Logger.Read("AspireRunner.Core.Dashboard", lineCount);

        _currentLog = _currentLog.Concat(newLogs)
            .TakeLast(lineCount)
            .ToArray();

        if (_currentLog.Length == 0)
        {
            return (new Text(""), false);
        }

        var contentSize = Widgets.IsConsoleSmall() ? 10 : 15;
        var visibleLines = Math.Max(AnsiConsole.Profile.Height - contentSize, 1);
        return (
            Panel: new Align(
                new Rows(
                    _currentLog.TakeLast(visibleLines).Select(Widgets.LogRecord)
                ),
                HorizontalAlignment.Left, VerticalAlignment.Middle
            ),
            LogUpdated: newLogs.Length > 0
        );
    }

    private static DashboardOptions BuildOptions(Settings args)
    {
        var useHttps = args.OtlpHttps ?? args.UseHttps ?? true;
        var corsConfigured = !string.IsNullOrWhiteSpace(args.CorsAllowedOrigins) || !string.IsNullOrWhiteSpace(args.CorsAllowedHeaders);
        var browserTelemetryEnabled = args.OtlpHttpPort is > 0 and <= 65535 || corsConfigured;

        var aspireDashboardOptions = new DashboardOptions
        {
            Frontend = new FrontendOptions
            {
                BrowserToken = args.AuthToken,
                AuthMode = args.UseAuth || !string.IsNullOrWhiteSpace(args.AuthToken) ? FrontendAuthMode.BrowserToken : FrontendAuthMode.Unsecured,
                EndpointUrls = UrlHelper.BuildLocalUrl(args.DashboardPort, args.DashboardHttps ?? args.UseHttps ?? true, args.Hostname)
            },
            Otlp = new OtlpOptions
            {
                PrimaryApiKey = args.OtlpKey,
                Cors = browserTelemetryEnabled ? new OtlpCorsOptions() : null,
                AuthMode = string.IsNullOrWhiteSpace(args.OtlpKey) ? OtlpAuthMode.Unsecured : OtlpAuthMode.ApiKey
            },
            Runner = new RunnerOptions
            {
                PreferredVersion = args.Version,
                PipeOutput = args.Verbose ?? false,
                LaunchBrowser = args.LaunchBrowser,
                AutoUpdate = args.AutoUpdate ?? true,
                SingleInstanceHandling = args.AllowMultipleInstances ? SingleInstanceHandling.Ignore : SingleInstanceHandling.ReplaceExisting
            }
        };

        if (args.OtlpPort is > 0 and <= 65535)
        {
            aspireDashboardOptions.Otlp.EndpointUrl = UrlHelper.BuildLocalUrl(args.OtlpPort, useHttps, args.Hostname);
        }

        if (browserTelemetryEnabled)
        {
            aspireDashboardOptions.Otlp.HttpEndpointUrl = UrlHelper.BuildLocalUrl(args.OtlpHttpPort ?? OtlpOptions.DefaultOtlpHttpPort, useHttps, args.Hostname);
        }

        if (aspireDashboardOptions.Otlp.Cors is not null)
        {
            aspireDashboardOptions.Otlp.Cors.AllowedHeaders = args.CorsAllowedHeaders;
            aspireDashboardOptions.Otlp.Cors.AllowedOrigins = args.CorsAllowedOrigins ?? "*";
        }

        return aspireDashboardOptions;
    }

    private static IReadOnlyCollection<string> GetEnabledEndpoints(DashboardOptions dashboardOptions)
    {
        var enabledEndpoints = new List<string>();
        if (dashboardOptions.Otlp.HttpEndpointUrl is not null)
        {
            enabledEndpoints.Add("http");
        }

        if (dashboardOptions.Otlp.EndpointUrl is not null)
        {
            enabledEndpoints.Add("grpc");
        }

        return enabledEndpoints;
    }
}