using AspireRunner.Tool.Extensions;
using Microsoft.Extensions.Logging.Abstractions;
using Spectre.Console.Rendering;
using System.ComponentModel;
using System.Runtime.InteropServices;

namespace AspireRunner.Tool.Commands;

public class RunCommand : AsyncCommand<RunCommand.Settings>
{
    public class Settings : CommandSettings
    {
        [CommandArgument(0, "[version]")]
        [Description("The version of the dashboard to run")]
        public string? Version { get; set; }

        [CommandOption("-b|--browser")]
        [Description("Launch the dashboard in the default browser")]
        public bool LaunchBrowser { get; set; }

        [DefaultValue(18888)]
        [CommandOption("-p|--port")]
        [Description("The port the dashboard will be available on")]
        public int DashboardPort { get; init; }

        [CommandOption("-a|--auth")]
        [Description("Use browser token authentication for the dashboard")]
        public bool UseAuth { get; init; }

        [CommandOption("-t|--token")]
        [Description("The token to use for dashboard authentication, if not passed, the token will be randomly generated by the dashboard")]
        public string? AuthToken { get; set; }

        [CommandOption("-s|--https")]
        [Description("Use HTTPS instead of HTTP, this applies to both the dashboard and the OTLP server, Enabled by default")]
        public bool? UseHttps { get; init; }

        [CommandOption("--dashboard-https")]
        [Description("Use HTTPS instead of HTTP for the dashboard, overrides the global HTTPS option")]
        public bool? DashboardHttps { get; init; }

        [DefaultValue(4317)]
        [CommandOption("--otlp-port")]
        [Description("The port the OTLP/gRPC server will listen on, can be disabled by passing 0")]
        public int OtlpPort { get; init; }

        [CommandOption("--otlp-http-port")]
        [Description("The port the OTLP/HTTP server will listen on, by default, only the gRPC server is started")]
        public int? OtlpHttpPort { get; set; }

        [CommandOption("--otlp-key")]
        [Description("The API key to use for the OTLP server")]
        public string? OtlpKey { get; set; }

        [CommandOption("--otlp-https")]
        [Description("Use HTTPS instead of HTTP for the OTLP/gRPC and OTLP/HTTP endpoints, overrides the global HTTPS option")]
        public bool? OtlpHttps { get; set; }

        [CommandOption("--cors-origins")]
        [Description("The allowed origins for CORS requests, separated by a comma. A wildcard (*) can be used to allow any domain")]
        public string? CorsAllowedOrigins { get; set; }

        [CommandOption("--cors-headers")]
        [Description("The allowed headers for CORS requests, separated by a comma")]
        public string? CorsAllowedHeaders { get; set; }

        [CommandOption("--hostname")]
        [Description("The hostname used for the dashboard and OTLP server, 'localhost' by default")]
        public string? Hostname { get; set; }

        [CommandOption("-m|--multiple")]
        [Description("Allow running multiple instances of the dashboard, if not passed, existing instances will be replaced")]
        public bool AllowMultipleInstances { get; set; }

        [CommandOption("--auto-update")]
        [Description("Automatically update the dashboard to the latest version, Enabled by default")]
        public bool? AutoUpdate { get; set; }

        [CommandOption("-v|--verbose")]
        [Description("Enable verbose logging")]
        public bool Verbose { get; set; }
    }

    private readonly Renderable _smallHeader = Markup.FromInterpolated($"[fuchsia][link={Runner.ProjectUrl}]Aspire Runner[/][/]");
    private readonly Renderable _largeHeader = new FigletText("Aspire Runner").LeftJustified().Color(Color.Fuchsia);

    private Renderable Header => AnsiConsole.Profile.Height < 15 || AnsiConsole.Profile.Width < 90 ? _smallHeader : _largeHeader;

    private Renderable GetStatusSymbol(bool status)
    {
        var style = status ?
            new Style(Color.Green, decoration: Decoration.Bold) :
            new Style(Color.Red, decoration: Decoration.Bold);

        return new Markup("○", style);
    }

    public override async Task<int> ExecuteAsync(CommandContext context, Settings settings)
    {
        AnsiConsole.Write(Header);
        AnsiConsole.Write(new Markup($"Version [fuchsia]{Runner.Version}[/]"));
        AnsiConsole.Console.EmptyLines(2);

        // Prepare dashboard options
        Dashboard? dashboard = null;
        var dashboardOptions = BuildOptions(settings);
        var httpEndpointEnabled = dashboardOptions.Otlp.HttpEndpointUrl is not null;
        var grpcEndpointEnabled = dashboardOptions.Otlp.EndpointUrl is not null || (dashboardOptions.Otlp.EndpointUrl is null && dashboardOptions.Otlp.HttpEndpointUrl is null);
        var endpointCount = grpcEndpointEnabled.GetHashCode() | httpEndpointEnabled.GetHashCode();

        // Register runner signal handlers
        void StopHandler(PosixSignalContext _) => dashboard?.StopAsync().Wait();
        using var sigInt = PosixSignalRegistration.Create(PosixSignal.SIGINT, StopHandler);
        using var sigTerm = PosixSignalRegistration.Create(PosixSignal.SIGTERM, StopHandler);

        // Start initializing the dashboard
        await AnsiConsole.Status()
            .Spinner(Spinner.Known.Dots)
            .SpinnerStyle(new Style(Color.Fuchsia))
            .StartAsync("Initializing runner", async ctx =>
            {
                var dashboardFactory = new DashboardFactory(new NullLogger<DashboardFactory>(), new NullLoggerFactory());

                ctx.Status("Looking for installed dashboards");
                dashboard = await dashboardFactory.CreateDashboardAsync(dashboardOptions);

                if (dashboard is null)
                {
                    AnsiConsole.MarkupLineInterpolated($"[red]Couldn't find any dashboards installed, run '{Runner.CommandName} install' to install the latest version[/]");
                    return;
                }

                if (settings.Version is not null && !VersionRange.Parse(settings.Version, true).IsSatisfied(dashboard.Version))
                {
                    AnsiConsole.MarkupLineInterpolated($"[red]No version matching '{settings.Version}' is installed, run '{Runner.CommandName} install {settings.Version}' to install it[/]");
                    dashboard = null;
                    return;
                }

                AnsiConsole.MarkupLineInterpolated($"Found dashboard version [fuchsia]{dashboard.Version}[/] at {dashboard.InstallationPath}");

                ctx.Status("Starting dashboard process...");
                await dashboard.StartAsync(CancellationToken.None);
            });

        if (dashboard?.IsRunning is not true)
        {
            AnsiConsole.MarkupLineInterpolated($"[red]Failed to start dashboard[/]");
            return -1;
        }

        AnsiConsole.MarkupLine("Dashboard started successfully [green]✓[/]");
        AnsiConsole.Clear();

        // Prepare the main layout
        var defaultStatus = GetStatusSymbol(false);
        var table = new Table()
            .BorderStyle(new Style(Color.Fuchsia, decoration: Decoration.Dim))
            .AddColumn("Dashboard", c => c.Centered())
            .AddColumn("OTLP/gRPC", c => c.Centered())
            .AddColumn("OTLP/HTTP", c => c.Centered())
            .AddRow(defaultStatus, defaultStatus, defaultStatus);

        var actionsPrompt = Markup.FromInterpolated($"Press [fuchsia bold]S[/] to stop the dashbord, [fuchsia bold]R[/] to restart it, or [fuchsia bold]Esc[/]/[fuchsia bold]Ctrl+C[/] to exit the runner");
        var mainLayout = new Layout("main").SplitRows(
            new Layout("header", new Align(new Rows(Header, table), HorizontalAlignment.Left, VerticalAlignment.Top)).Ratio(10),
            new Layout("prompt", new Align(actionsPrompt, HorizontalAlignment.Left, VerticalAlignment.Bottom)).Ratio(3)
        );

        // Render the main layout
        await RenderLiveInitialization();

        var currentWidth = AnsiConsole.Profile.Width;
        var currentHeight = AnsiConsole.Profile.Height;

        mainLayout.Render();

        while (true)
        {
            if (AnsiConsole.Profile.Width != currentWidth || AnsiConsole.Profile.Height != currentHeight)
            {
                mainLayout["header"].Update(new Align(new Rows(Header, table), HorizontalAlignment.Left, VerticalAlignment.Top));
                mainLayout.Render();
                currentWidth = AnsiConsole.Profile.Width;
                currentHeight = AnsiConsole.Profile.Height;
            }

            if (Console.KeyAvailable)
            {
                var pressedKey = Console.ReadKey(true);
                switch (pressedKey.Key)
                {
                    case ConsoleKey.Escape:
                    {
                        await StopDashboard();
                        return 0;
                    }
                    case ConsoleKey.R:
                    {
                        await StopDashboard();

                        await dashboard.StartAsync();
                        await RenderLiveInitialization();

                        mainLayout.Render();
                        break;
                    }
                    case ConsoleKey.S:
                    {
                        await StopDashboard();
                        break;
                    }
                }
            }

            await Task.Delay(5).ConfigureAwait(false);
        }

        async Task RenderLiveInitialization()
        {
            mainLayout["prompt"].Invisible();

            await AnsiConsole.Live(mainLayout)
                .Overflow(VerticalOverflow.Visible)
                .Cropping(VerticalOverflowCropping.Bottom)
                .AutoClear(false)
                .StartAsync(async ctx =>
                {
                    var spinner = !AnsiConsole.Console.Profile.Capabilities.Unicode ? Spinner.Known.Ascii : Spinner.Known.Dots;
                    var frameIndex = 0;

                    while (dashboard.IsRunning)
                    {
                        var currentFrame = new Markup(spinner.Frames[frameIndex % spinner.Frames.Count], new Style(Color.Fuchsia));
                        table.UpdateCell(0, 0, dashboard.Url is null ? currentFrame : Markup.FromInterpolated($"[link]{dashboard.Url}[/]"));

                        if (grpcEndpointEnabled)
                        {
                            var grpcEndpoint = dashboard.OtlpEndpoints?.FirstOrDefault(e => e.Protocol.Contains("grpc", StringComparison.OrdinalIgnoreCase));
                            table.UpdateCell(0, 1, grpcEndpoint is null ? currentFrame : Markup.FromInterpolated($"[link]{grpcEndpoint.Value.Url}[/]"));
                        }

                        if (httpEndpointEnabled)
                        {
                            var httpEndpoint = dashboard.OtlpEndpoints?.FirstOrDefault(e => e.Protocol.Contains("http", StringComparison.OrdinalIgnoreCase));
                            table.UpdateCell(0, 2, httpEndpoint is null ? currentFrame : Markup.FromInterpolated($"[link]{httpEndpoint.Value.Url}[/]"));
                        }

                        ctx.Refresh();
                        if (dashboard.Url != null && dashboard.OtlpEndpoints?.Count == endpointCount)
                        {
                            break;
                        }

                        frameIndex++;
                        await Task.Delay(spinner.Interval);
                    }
                });

            mainLayout["prompt"].Visible();
        }

        async Task StopDashboard()
        {
            await dashboard.StopAsync();

            table.UpdateCell(0, 0, defaultStatus);
            table.UpdateCell(0, 1, defaultStatus);
            table.UpdateCell(0, 2, defaultStatus);
            mainLayout.Render();
        }
    }

    private static DashboardOptions BuildOptions(Settings args)
    {
        var useHttps = args.OtlpHttps ?? args.UseHttps ?? true;
        var corsConfigured = !string.IsNullOrWhiteSpace(args.CorsAllowedOrigins) || !string.IsNullOrWhiteSpace(args.CorsAllowedHeaders);
        var browserTelemetryEnabled = args.OtlpHttpPort is > 0 and <= 65535 || corsConfigured;

        var aspireDashboardOptions = new DashboardOptions
        {
            Frontend = new FrontendOptions
            {
                BrowserToken = args.AuthToken,
                AuthMode = args.UseAuth || !string.IsNullOrWhiteSpace(args.AuthToken) ? FrontendAuthMode.BrowserToken : FrontendAuthMode.Unsecured,
                EndpointUrls = UrlHelper.BuildLocalUrl(args.DashboardPort, args.DashboardHttps ?? args.UseHttps ?? true, args.Hostname)
            },
            Otlp = new OtlpOptions
            {
                PrimaryApiKey = args.OtlpKey,
                Cors = browserTelemetryEnabled ? new OtlpCorsOptions() : null,
                AuthMode = string.IsNullOrWhiteSpace(args.OtlpKey) ? OtlpAuthMode.Unsecured : OtlpAuthMode.ApiKey
            },
            Runner = new RunnerOptions
            {
                PreferredVersion = args.Version,
                LaunchBrowser = args.LaunchBrowser,
                AutoUpdate = args.AutoUpdate ?? true,
                SingleInstanceHandling = args.AllowMultipleInstances ? SingleInstanceHandling.Ignore : SingleInstanceHandling.ReplaceExisting
            }
        };

        if (args.OtlpPort is > 0 and <= 65535)
        {
            aspireDashboardOptions.Otlp.EndpointUrl = UrlHelper.BuildLocalUrl(args.OtlpPort, useHttps, args.Hostname);
        }

        if (browserTelemetryEnabled)
        {
            aspireDashboardOptions.Otlp.HttpEndpointUrl = UrlHelper.BuildLocalUrl(args.OtlpHttpPort ?? OtlpOptions.DefaultOtlpHttpPort, useHttps, args.Hostname);
        }

        if (aspireDashboardOptions.Otlp.Cors is not null)
        {
            aspireDashboardOptions.Otlp.Cors.AllowedHeaders = args.CorsAllowedHeaders;
            aspireDashboardOptions.Otlp.Cors.AllowedOrigins = args.CorsAllowedOrigins ?? "*";
        }

        return aspireDashboardOptions;
    }
}